import React from "react";
import { AbilityLong, EntityType, PartialEntity } from "../../api/model";
import { getMaxPlayerHp, isBase64UrlImage } from "../../utilities";
import { abilityOptions, profLevelOptions, proficiencies } from "../../consts";
import { GenericInputElement, IFormFieldProps } from "../inputs";

export const getEntityFormFields = (
  entity: PartialEntity,
  setEntity: React.Dispatch<React.SetStateAction<PartialEntity>>,
  parentOnChange: (name: string, value: any) => void
): Record<string, IFormFieldProps[]> => ({
  general: [
    {
      name: "name",
      label: "Name",
      group: "general",
      inputType: "text",
      value: entity.name,
      onChange: parentOnChange,
      validation: (value: string) => value.length > 0,
      errorMessage: "Name cannot be empty",
      required: true,
    },
    {
      name: "image",
      label: "Portrait",
      group: "general",
      inputType: "file",
      value: entity.image,
      onChange: parentOnChange,
      validation: (image: string) => isBase64UrlImage(image),
      errorMessage: "The image provided is invalid.",
    },
    {
      name: "build.level",
      label: "Level",
      group: "general",
      inputType: "number",
      value: entity.build.level || 1,
      validation: (value: number) => value > 0 && value <= 20,
      errorMessage: "Invalid level",
      onChange: (n, v) => {
        parentOnChange(n, v);
        const level = Number(v);
        setEntity((prev) => ({
          ...prev,
          level,
          maxHp: getMaxPlayerHp({ ...prev, level } as PartialEntity),
        }));
      },
      min: 1,
      max: 20,
      getIsRequired: (type) => type === EntityType.Player,
    },
    {
      name: "build.ancestry",
      label: "Ancestry",
      group: "general",
      inputType: "text",
      value: entity.build.ancestry,
      onChange: parentOnChange,
      getIsRequired: (type) => type === EntityType.Player,
    },
    {
      name: "build.heritage",
      label: "Heritage",
      group: "general",
      inputType: "text",
      value: entity.build.heritage,
      onChange: parentOnChange,
      getIsRequired: (type) => type === EntityType.Player,
    },
    {
      name: "build.background",
      label: "Background",
      group: "general",
      inputType: "text",
      value: entity.build.background,
      onChange: parentOnChange,
      getIsRequired: (type) => type === EntityType.Player,
    },
    {
      name: "build.gender",
      label: "Gender",
      group: "general",
      inputType: "text",
      value: entity.build.gender,
      onChange: parentOnChange,
    },
    {
      name: "build.age",
      label: "Age",
      group: "general",
      inputType: "text",
      value: entity.build.age,
      onChange: parentOnChange,
    },
    {
      name: "build.deity",
      label: "Deity",
      group: "general",
      inputType: "text",
      value: entity.build.deity,
      onChange: parentOnChange,
    },
    {
      name: "build.languages",
      label: "Languages",
      group: "general",
      inputType: "text",
      multipleInputs: true,
      multipleInputsType: "list",
      value: entity.build.languages,
      onChange: parentOnChange,
    },
    {
      name: "build.size",
      label: "Size",
      group: "general",
      inputType: "radio",
      // write options
      value: entity.build.size,
      onChange: parentOnChange,
    },
  ],

  abilities: [
    {
      name: "build.keyability",
      label: "Key ability",
      group: "abilities",
      inputType: "dropdown",
      options: abilityOptions,
      value: entity.build.keyability,
      onChange: parentOnChange,
      getIsRequired: (type) => type === EntityType.Player,
    },
    {
      name: "build.abilities.str",
      label: AbilityLong.str,
      group: "abilities",
      inputType: "number",
      value: entity.build.abilities?.str || 10,
      onChange: parentOnChange,
      getIsRequired: (type) => type === EntityType.Player,
    },
    {
      name: "build.abilities.dex",
      label: AbilityLong.dex,
      group: "abilities",
      inputType: "number",
      value: entity.build.abilities?.dex || 10,
      onChange: parentOnChange,
      getIsRequired: (type) => type === EntityType.Player,
    },
    {
      name: "build.abilities.con",
      label: AbilityLong.con,
      group: "abilities",
      inputType: "number",
      value: entity.build.abilities?.con || 10,
      onChange: parentOnChange,
      getIsRequired: (type) => type === EntityType.Player,
    },
    {
      name: "build.abilities.int",
      label: AbilityLong.int,
      group: "abilities",
      inputType: "number",
      value: entity.build.abilities?.int || 10,
      onChange: parentOnChange,
      getIsRequired: (type) => type === EntityType.Player,
    },
    {
      name: "build.abilities.wis",
      label: AbilityLong.wis,
      group: "abilities",
      inputType: "number",
      value: entity.build.abilities?.wis || 10,
      onChange: parentOnChange,
      getIsRequired: (type) => type === EntityType.Player,
    },
    {
      name: "build.abilities.cha",
      label: AbilityLong.cha,
      group: "abilities",
      inputType: "number",
      value: entity.build.abilities?.cha || 10,
      onChange: parentOnChange,
      getIsRequired: (type) => type === EntityType.Player,
    },
  ],

  proficiencies: [
    {
      name: "build.proficiencies",
      label: "Proficiencies",
      group: "abilities",
      inputType: "radio",
      multipleInputs: true,
      multipleInputsType: "dict",
      keySuggestions: proficiencies,
      options: profLevelOptions,
      value: entity.build.proficiencies || {},
      onChange: parentOnChange,
      getIsRequired: (type) => type === EntityType.Player,
    },
  ],
});
